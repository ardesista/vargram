THREE.PieceControls=function(_objects,_camera,_domElement){function activate(){_domElement.addEventListener("mousemove",onDocumentMouseMove,!1),_domElement.addEventListener("mousedown",onDocumentMouseDown,!1),_domElement.addEventListener("mouseup",onDocumentMouseUp,!1)}function deactivate(){_domElement.removeEventListener("mousemove",onDocumentMouseMove,!1),_domElement.removeEventListener("mousedown",onDocumentMouseDown,!1),_domElement.removeEventListener("mouseup",onDocumentMouseUp,!1)}function dispose(){deactivate()}function onDocumentMouseMove(event){if(event.preventDefault(),_mouse.x=event.clientX/_domElement.width*2-1,_mouse.y=2*-(event.clientY/_domElement.height)+1,_raycaster.setFromCamera(_mouse,_camera),_selected&&scope.enabled&&_raycaster.ray.intersectPlane(_plane,_intersection))if(1==event.buttons){var p=new THREE.Vector3(_intersection.x-_offset.x,0,_intersection.z-_offset.z);_selected.applyCentralForce(p.multiplyScalar(1e5)),_offset=_intersection.clone()}else{var a=Math.atan2(_offset.z-_selected.position.z,_offset.x-_selected.position.x)-Math.atan2(_intersection.z-_selected.position.z,_intersection.x-_selected.position.x);_selected.setAngularVelocity({x:0,y:a>0?1:-1,z:0}),_offset=_intersection.clone()}else{_raycaster.setFromCamera(_mouse,_camera);var intersects=_raycaster.intersectObjects(_objects);if(intersects.length>0){var object=intersects[0].object;_plane.setFromNormalAndCoplanarPoint(_camera.getWorldDirection(_plane.normal),object.position),_hovered!==object&&(scope.dispatchEvent({type:"hoveron",object:object}),_domElement.style.cursor="pointer",_hovered=object)}else null!==_hovered&&(scope.dispatchEvent({type:"hoveroff",object:_hovered}),_domElement.style.cursor="auto",_hovered=null)}}function onDocumentMouseDown(event){event.preventDefault(),_raycaster.setFromCamera(_mouse,_camera);var intersects=_raycaster.intersectObjects(_objects);intersects.length>0&&(_selected=intersects[0].object,_raycaster.ray.intersectPlane(_plane,_intersection)&&_offset.copy(_intersection),_domElement.style.cursor="move",scope.dispatchEvent({type:"dragstart",object:_selected}))}function onDocumentMouseUp(event){event.preventDefault(),_selected&&(scope.dispatchEvent({type:"dragend",object:_selected}),_selected=null),_domElement.style.cursor="auto"}var _plane=new THREE.Plane,_raycaster=new THREE.Raycaster,_mouse=new THREE.Vector2,_offset=new THREE.Vector3,_intersection=new THREE.Vector3,_selected=null,_hovered=null,scope=this;activate(),this.enabled=!0,this.activate=activate,this.deactivate=deactivate,this.dispose=dispose,this.setObjects=function(){console.error("THREE.PieceControls: setObjects() has been removed.")},this.on=function(type,listener){console.warn("THREE.PieceControls: on() has been deprecated. Use addEventListener() instead."),scope.addEventListener(type,listener)},this.off=function(type,listener){console.warn("THREE.PieceControls: off() has been deprecated. Use removeEventListener() instead."),scope.removeEventListener(type,listener)},this.notify=function(type){console.error("THREE.PieceControls: notify() has been deprecated. Use dispatchEvent() instead."),scope.dispatchEvent({type:type})}},THREE.PieceControls.prototype=Object.create(THREE.EventDispatcher.prototype),THREE.PieceControls.prototype.constructor=THREE.PieceControls;