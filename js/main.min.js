window.onload=function(){function getPiecesCoords(L,sliders){function lerp(a,b,t){return[t*b[0]+(1-t)*a[0],t*b[1]+(1-t)*a[1]]}var ZERO=[0,0],X=[L,0],Y=[0,L],G=[L,L],A=lerp(X,G,sliders.a),B=lerp(ZERO,X,sliders.b),C=lerp(A,B,sliders.c),D=lerp(C,Y,sliders.d),E=lerp(ZERO,D,sliders.e),F=lerp(D,G,sliders.f);return[[B,A,X],[ZERO,Y,D],[D,G,Y],[D,C,E],[A,F,G],[ZERO,E,C,B],[D,F,A,C]]}function getPieceShape(L,sliders,id){var coords=getPiecesCoords(L,sliders)[id],shape=new THREE.Shape;shape.moveTo(coords[0][0],coords[0][1]);for(var i=1;i<coords.length;i++)shape.lineTo(coords[i][0],coords[i][1]);return shape}function buildPieceMaterial(color){return Physijs.createMaterial(new THREE.MeshStandardMaterial({color:color,metalness:0,shading:THREE.FlatShading}),.99,.125)}function centerGeometry(geometry,centroid){if(!centroid){centroid=new THREE.Vector3(0,0,0);for(var i=0;i<geometry.vertices.length;i++)centroid.add(geometry.vertices[i]);centroid.divideScalar(geometry.vertices.length)}return geometry.translate(-centroid.x,-centroid.y,-centroid.z),geometry.verticesNeedUpdate=!0,geometry.computeBoundingBox(),centroid}function updatePieces(pieces,L,sliders,piecesMaterials,scene){for(var pos,rot,mesh,i=0;i<piecesMaterials.length;i++){var geometry=new THREE.ExtrudeGeometry(getPieceShape(L,sliders,i),{amount:.06*L,bevelEnabled:!1}),centroid=centerGeometry(geometry);mesh=new Physijs.ConvexMesh(geometry,piecesMaterials[i],1e3),mesh.userData.centroid=centroid,i>=pieces.length?(pos=new THREE.Vector3(centroid.x-L/2,centroid.z,centroid.y-L/2),rot=new THREE.Vector3(Math.PI/2,0,0),pieces.push(mesh)):(pos=new THREE.Vector3(centroid.x+pieces[i].position.x-pieces[i].userData.centroid.x,pieces[i].position.y,centroid.y+pieces[i].position.z-pieces[i].userData.centroid.y),rot={x:pieces[i].rotation.x,y:pieces[i].rotation.y,z:pieces[i].rotation.z},scene.remove(pieces[i]),pieces[i]=mesh),mesh.castShadow=mesh.receiveShadow=!0,mesh.position.copy(pos),mesh.rotation.set(rot.x,rot.y,rot.z),scene.add(pieces[i])}return pieces}function explodePieces(pieces,amount){for(var centroid=new THREE.Vector3(0,0,0),i=0;i<pieces.length;i++)centroid.add(pieces[i].position);centroid.divideScalar(pieces.length);for(var p=new THREE.Vector3,i=0;i<pieces.length;i++)pieces[i].position.add(p.copy(pieces[i].position).sub(centroid).multiplyScalar(amount)),pieces[i].__dirtyPosition=pieces[i].__dirtyRotation=!0}function reset(){for(var k in slidersInit)sliders[k]=slidersInit[k];for(;pieces.length>0;)scene.remove(pieces.pop());pieces=updatePieces(pieces,L,sliders,piecesMaterials,scene),camera.position.set(0,65,25),camera.lookAt(ground.position),camera.dispatchEvent({type:"reset"})}function slidersChange(v){updatePieces(pieces,L,sliders,piecesMaterials,scene)}var scene,camera,L=50,sliders={},pieces=[],slidersInit={a:.5,b:.5,c:.5,d:1/3,e:.5,f:.5},piecesMaterials=[buildPieceMaterial(16711680),buildPieceMaterial(3115216),buildPieceMaterial(16756409),buildPieceMaterial(65458),buildPieceMaterial(153),buildPieceMaterial(16763955),buildPieceMaterial(16119260)];Physijs.scripts.worker="js/physijs_worker.js",Physijs.scripts.ammo="ammo.js",scene=new Physijs.Scene,scene.setGravity(new THREE.Vector3(0,-50,0)),scene.add(new THREE.AmbientLight(14737632));var light=new THREE.PointLight(16776946,.5,200,2);light.position.set(0,100,0),light.castShadow=!0,light.shadow.bias=1e-4,light.shadow.mapSize.width=2048,light.shadow.mapSize.height=2048,scene.add(light);var groundMaterial=Physijs.createMaterial(new THREE.MeshStandardMaterial({color:12370400,metalness:0,shading:THREE.FlatShading}),.99,.2),ground=new Physijs.PlaneMesh(new THREE.PlaneGeometry(2500,2500),groundMaterial,0);ground.position.set(0,0,0),ground.rotation.set(-Math.PI/2,0,0),ground.receiveShadow=!0,scene.add(ground),scene.update=function(dt){for(var i=0;i<pieces.length;i++){var l=pieces[i].getLinearVelocity().length();l>30&&pieces[i].setLinearVelocity(pieces[i].getLinearVelocity().normalize().multiplyScalar(30));var l=pieces[i].getAngularVelocity().length();l>50&&pieces[i].setAngularVelocity(pieces[i].getAngularVelocity().normalize().multiplyScalar(50))}},camera=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.125,1024),reset();var gui=new dat.GUI({autoPlace:!1}),customContainer=document.getElementById("dat-gui");customContainer.appendChild(gui.domElement);for(var k in slidersInit)gui.add(sliders,k,.1,.9).onChange(slidersChange).listen();gui.add({Explode:function(){explodePieces(pieces,.25)}},"Explode"),gui.add({Export:function(){for(var exporter=new THREE.OBJExporter,exportedScene=new THREE.Scene,i=0;i<pieces.length;i++)exportedScene.add(pieces[i].clone());var blob=new Blob([exporter.parse(exportedScene)],{type:"text/plain;charset=utf-8"});saveAs(blob,"vargram.obj")}},"Export"),gui.add({Flick:function(){for(var centroid=new THREE.Vector3(0,0,0),impNorm=new THREE.Vector3(0,0,0),offset=new THREE.Vector3(0,0,0),i=0;i<pieces.length;i++)centroid.add(pieces[i].position);centroid.divideScalar(pieces.length);for(var i=0;i<pieces.length;i++)impNorm.copy(pieces[i].position).sub(centroid).normalize().multiplyScalar(3),offset.x=(Math.random()-.5)*L/8,offset.z=(Math.random()-.5)*L/8,impNorm.y=8,pieces[i].applyImpulse(impNorm.multiplyScalar(2e4),offset)}},"Flick"),gui.add({Reset:reset},"Reset"),function(scene,camera){function render(t){requestAnimationFrame(render),controls.update(),scene.simulate(void 0,2),scene.update(t-scene.t),scene.t=t,renderer.render(scene,camera)}var canvas=document.getElementById("renderer"),controls=new THREE.OrbitControls(camera,canvas);controls.enableDamping=!0,controls.dampingFactor=.25,controls.enableZoom=!0,controls.rotateSpeed=.25,controls.minPolarAngle=-Math.PI/4,controls.maxPolarAngle=7*Math.PI/16,camera.addEventListener("reset",function(event){controls.reset()});var pieceControls=new THREE.PieceControls(pieces,camera,canvas);pieceControls.addEventListener("dragstart",function(event){controls.enabled=!1}),pieceControls.addEventListener("dragend",function(event){controls.enabled=!0}),pieceControls.addEventListener("drag",function(event){});var renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0,canvas:canvas});renderer.shadowMap.enabled=!0,renderer.shadowMap.type=THREE.PCFSoftShadowMap,renderer.setSize(canvas.offsetWidth,canvas.offsetHeight),scene.t=performance.now(),requestAnimationFrame(render)}(scene,camera)};